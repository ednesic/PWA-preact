'use strict';

exports.__esModule = true;
exports.showStats = showStats;
exports.writeJsonStats = writeJsonStats;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevServer = require('webpack-dev-server');

var _webpackDevServer2 = _interopRequireDefault(_webpackDevServer);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _webpackClientConfig = require('./webpack-client-config');

var _webpackClientConfig2 = _interopRequireDefault(_webpackClientConfig);

var _webpackServerConfig = require('./webpack-server-config');

var _webpackServerConfig2 = _interopRequireDefault(_webpackServerConfig);

var _transformConfig = require('./transform-config');

var _transformConfig2 = _interopRequireDefault(_transformConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function () {
	var _ref = _asyncToGenerator(function* () {
		var watch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
		var env = arguments[1];
		var onprogress = arguments[2];

		if (watch) {
			return yield devBuild(env, onprogress);
		}

		return yield prodBuild(env);
	});

	return function () {
		return _ref.apply(this, arguments);
	};
}();

var devBuild = function () {
	var _ref2 = _asyncToGenerator(function* (env, onprogress) {
		var config = (0, _webpackClientConfig2.default)(env);
		yield (0, _transformConfig2.default)(env, config);

		var compiler = (0, _webpack2.default)(config);
		return yield new Promise(function (resolve, reject) {
			var first = true;
			compiler.plugin('done', function (stats) {
				if (first) {
					first = false;
					var devServer = config.devServer;
					var serverAddr = `${devServer.https ? 'https' : 'http'}://${process.env.HOST || devServer.host || 'localhost'}:${process.env.PORT || devServer.port || 8080}`;
					process.stdout.write(`  \u001b[32m> Development server started at ${serverAddr}\u001b[39m\n`);
				}
				if (onprogress) onprogress(stats);
			});
			compiler.plugin('failed', reject);

			var server = new _webpackDevServer2.default(compiler, config.devServer);
			server.listen(config.devServer.port);
		});
	});

	return function devBuild(_x2, _x3) {
		return _ref2.apply(this, arguments);
	};
}();

var prodBuild = function () {
	var _ref3 = _asyncToGenerator(function* (env) {
		var compiler = void 0,
		    client = (0, _webpackClientConfig2.default)(env);

		yield (0, _transformConfig2.default)(env, client);

		if (env.prerender) {
			var ssrConfig = (0, _webpackServerConfig2.default)(env);
			yield (0, _transformConfig2.default)(env, ssrConfig, true);
			compiler = (0, _webpack2.default)([client, ssrConfig]);
		} else {
			compiler = (0, _webpack2.default)(client);
		}

		return yield new Promise(function (resolve, reject) {
			compiler.run(function (err, stats) {
				if (err || stats.hasErrors()) {
					reject(err || stats.toJson().errors.join('\n'));
				} else {
					setTimeout(function () {
						return resolve(stats);
					}, 20);
				}
			});
		});
	});

	return function prodBuild(_x4) {
		return _ref3.apply(this, arguments);
	};
}();

function showStats(stats) {
	var info = stats.toJson();

	if (stats.hasErrors()) {
		info.errors.forEach(function (message) {
			process.stderr.write(message + '\n');
		});
	}

	if (stats.hasWarnings()) {
		info.warnings.forEach(function (message) {
			process.stderr.write(_chalk2.default.yellow(message) + '\n');
		});
	}

	return stats;
}

function writeJsonStats(stats) {
	var outputPath = _path2.default.resolve(process.cwd(), 'stats.json');
	var jsonStats = stats.toJson({
		json: true,
		chunkModules: true,
		source: false
	});

	jsonStats = jsonStats.children && jsonStats.children[0] || jsonStats;

	jsonStats.modules.forEach(normalizeModule);
	jsonStats.chunks.forEach(function (c) {
		return c.modules.forEach(normalizeModule);
	});

	return _fs2.default.writeFile(outputPath, JSON.stringify(jsonStats)).then(function () {
		process.stdout.write('\nWebpack output stats generated.\n\n');
		process.stdout.write('You can upload your stats.json to:\n');
		process.stdout.write('- https://chrisbateman.github.io/webpack-visualizer/\n');
		process.stdout.write('- https://webpack.github.io/analyse/\n');
	});
}

var normalizeModule = function normalizeModule(m) {
	var keysToNormalize = ['identifier', 'name', 'module', 'moduleName', 'moduleIdentifier'];

	keysToNormalize.forEach(function (key) {
		if (key in m) {
			m[key] = normalizeName(m[key]);
		}
	});

	if (m.reasons) {
		m.reasons.forEach(normalizeModule);
	}

	return m;
};

var normalizeName = function normalizeName(p) {
	return p.substr(p.lastIndexOf('!') + 1);
};