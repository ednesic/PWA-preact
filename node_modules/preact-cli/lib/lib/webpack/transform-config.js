'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _webpack = require('@webpack-blocks/webpack2');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function () {
  var _ref = _asyncToGenerator(function* (env, config) {
    var ssr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var transformerPath = _path2.default.resolve(env.cwd, env.config || './preact.config.js');

    try {
      yield _fs2.default.stat(transformerPath);
    } catch (e) {
      if (env.config) {
        throw new Error(`preact-cli config could not be loaded!\nFile ${env.config} not found.`);
      }
      return;
    }

    require('babel-register')({
      presets: [require.resolve('babel-preset-env')]
    });
    var m = require(transformerPath);
    var transformer = m && m.default || m;
    try {
      yield transformer(config, Object.assign({}, env, { ssr }), new WebpackConfigHelpers(env.cwd));
    } catch (err) {
      throw new Error(`Error at ${transformerPath}: \n` + err);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var WebpackConfigHelpers = function () {
  function WebpackConfigHelpers(cwd) {
    _classCallCheck(this, WebpackConfigHelpers);

    this._cwd = cwd;
  }

  WebpackConfigHelpers.prototype.getLoaders = function getLoaders(config) {
    return this.getRules(config).map(function (_ref2) {
      var rule = _ref2.rule,
          index = _ref2.index;
      return {
        rule: rule,
        ruleIndex: index,
        loaders: rule.loaders || rule.use || rule.loader
      };
    });
  };

  WebpackConfigHelpers.prototype.getRules = function getRules(config) {
    return [].concat(config.module.loaders || [], config.module.rules || []).map(function (rule, index) {
      return { index, rule };
    });
  };

  WebpackConfigHelpers.prototype.getPlugins = function getPlugins(config) {
    return (config.plugins || []).map(function (plugin, index) {
      return { index, plugin };
    });
  };

  WebpackConfigHelpers.prototype.getRulesByMatchingFile = function getRulesByMatchingFile(config, file) {
    var filePath = _path2.default.resolve(this._cwd, file);
    return this.getRules(config).filter(function (w) {
      return w.rule.test && w.rule.test.exec(filePath);
    });
  };

  WebpackConfigHelpers.prototype.getLoadersByName = function getLoadersByName(config, name) {
    return this.getLoaders(config).map(function (_ref3) {
      var rule = _ref3.rule,
          ruleIndex = _ref3.ruleIndex,
          loaders = _ref3.loaders;
      return Array.isArray(loaders) ? loaders.map(function (loader, loaderIndex) {
        return { rule, ruleIndex, loader, loaderIndex };
      }) : [{ rule, ruleIndex, loader: loaders, loaderIndex: -1 }];
    }).reduce(function (arr, loaders) {
      return arr.concat(loaders);
    }, []).filter(function (_ref4) {
      var loader = _ref4.loader;
      return loader === name || loader && loader.loader === name;
    });
  };

  WebpackConfigHelpers.prototype.getPluginsByName = function getPluginsByName(config, name) {
    return this.getPlugins(config).filter(function (w) {
      return w.plugin && w.plugin.constructor && w.plugin.constructor.name === name;
    });
  };

  WebpackConfigHelpers.prototype.getPluginsByType = function getPluginsByType(config, type) {
    return this.getPlugins(config).filter(function (w) {
      return w.plugin instanceof type;
    });
  };

  WebpackConfigHelpers.prototype.setHtmlTemplate = function setHtmlTemplate(config, template) {
    var isPath = void 0;
    try {
      _fs2.default.statSync(template);
      isPath = true;
    } catch (e) {}

    var templatePath = isPath ? `!!ejs-loader!${_path2.default.resolve(this._cwd, template)}` : template;
    var htmlWebpackPlugin = this.getPluginsByName(config, 'HtmlWebpackPlugin')[0];
    htmlWebpackPlugin.options.template = templatePath;
  };

  _createClass(WebpackConfigHelpers, [{
    key: 'webpack',
    get: function get() {
      return _webpack.webpack;
    }
  }]);

  return WebpackConfigHelpers;
}();